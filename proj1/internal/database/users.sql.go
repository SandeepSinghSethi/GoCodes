// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id,created_at, modified_at , username , api_key)
VALUES ($1,$2,$3,$4,
    encode(sha256(random()::text::bytea),'hex'))
RETURNING id, created_at, modified_at, username, api_key
`

type CreateUserParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	ModifiedAt time.Time
	Username   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Username,
		&i.ApiKey,
	)
	return i, err
}

const getAllusers = `-- name: GetAllusers :many
SELECT username,api_key FROM users
`

type GetAllusersRow struct {
	Username string
	ApiKey   string
}

func (q *Queries) GetAllusers(ctx context.Context) ([]GetAllusersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllusersRow
	for rows.Next() {
		var i GetAllusersRow
		if err := rows.Scan(&i.Username, &i.ApiKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByAPI = `-- name: GetUserByAPI :one
SELECT id, created_at, modified_at, username, api_key FROM users WHERE api_key = $1
`

func (q *Queries) GetUserByAPI(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPI, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Username,
		&i.ApiKey,
	)
	return i, err
}
